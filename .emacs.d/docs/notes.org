* Setting up
** Hunspell
- install hunspell (choco, homebrew etc.)
  - mingw64: pacman -S  mingw-w64-x86_64-hunspell-en mingw-w64-x86_64-hunspell
  - choco version seemed broken (did not list available dictionaries) (27.5.19)
- download dictionaries
  - https://github.com/wooorm/dictionaries copy and rename
  - https://extensions.libreoffice.org/extensions search, unzip and copy
  - https://wiki.documentfoundation.org/Language_support_of_LibreOffice
- set DICPATH
- set LANG
- copy dictionaries to DICPATH
- name them LANG.dic and LANG.aff
- hunspell -D to verify available dictionaries
- Dictionary 'default' might be required
** Open emacs from VS
- Tools -> External Tools
- emacsclient --no-wait +$(CurLine):$(CurCol) $(ItemPath)
- Tools -> Customize -> Commands -> Context Menu -> Other Context Menus | Code Window
- Add External Command n to the context menu
- https://stackoverflow.com/questions/16566315/add-an-item-to-the-visual-studio-folder-right-click-menu-within-addin
- https://docs.microsoft.com/en-us/visualstudio/ide/managing-external-tools?view=vs-2019
** compile_commands.json
*** cmake
- DCMAKE_EXPORT_COMPILE_COMMANDS=ON
*** scons
- https://github.com/SCons/scons/issues/3355
*** Visual Studio
- Sourcetrail
- https://www.sourcetrail.com/blog/export_clang_compilation_database_from_visual_studio_solution/
- https://old.reddit.com/r/cpp/comments/6o7uh8/how_to_export_a_clang_compilation_database_from_a/
*** other
- https://sarcasm.github.io/notes/dev/compilation-database.html#how-to-generate-a-json-compilation-database
* Windows
- You can run commands in WSL from emacs using the wsl prefix. For example: (setq mu4e-get-mail-command "wsl offlineimap -c offlineimaprc")
* Check
- http://pages.sachachua.com/.emacs.d/Sacha.html#orgdda953f
- https://ileriseviye.wordpress.com/2019/05/09/how-to-preview-fixed-width-mono-spaced-fonts-in-an-editable-emacs-buffer/
* Redefine keys
- https://old.reddit.com/r/emacs/comments/c0k5qa/defying_your_keyboard_with_elisp/
* Global
- https://github.com/noctuid/evil-guide
- http://ergoemacs.org/emacs/emacs_hyper_super_keys.html
- https://idiocy.org/emacs-fonts-and-fontsets.html
* emacs-lsp
- https://emacs-lsp.github.io/lsp-mode/lsp-mode.html
* Indentation
- evil uses different indendation based on lines and regions (evil-indent)
  - indent-according-to-mode for lines
  - indent-region for others
- https://www.emacswiki.org/emacs/IndentingC
* Refactoring
- http://manuel-uberti.github.io/emacs/2018/02/10/occur/
* Tabbing
- https://www.emacswiki.org/emacs/TabStopList
- https://stackoverflow.com/questions/4006005/how-can-i-set-emacs-tab-settings-by-file-type
- https://www.emacswiki.org/emacs/BackspaceWhitespaceToTabStop
- https://www.emacswiki.org/emacs/IndentationBasics
- https://www.gnu.org/software/emacs/manual/html_node/emacs/Indentation.html#Indentation
- https://emacs.stackexchange.com/questions/27869/how-to-make-evil-mode-tab-key-indent-not-re-indent-based-on-context
* Ivy
- http://oremacs.com/swiper/
- https://github.com/abo-abo/swiper
- https://oremacs.com/2015/04/16/ivy-mode/
- https://writequit.org/denver-emacs/presentations/2017-04-11-ivy.html
- https://www.reddit.com/r/emacs/comments/52lnad/from_helm_to_ivy_a_user_perspective/
* Helm
- https://emacs-helm.github.io/helm/
- https://github.com/emacs-helm/helm-descbinds
- https://tuhdo.github.io/helm-intro.html
* Org
- http://orgmode.org/worg/
- http://doc.norang.ca/org-mode.html
- http://ehneilsen.net/notebook/orgExamples/org-examples.html
- http://thagomizer.com/blog/2017/03/16/five-useful-org-mode-features.html
- https://github.com/Somelauw/evil-org-mode
- https://www.reddit.com/r/orgmode/comments/6mfvb1/syncing_org_files_to_android_orgzly_with_tasker/
- https://www.reddit.com/r/orgmode/comments/6t7ufq/what_are_the_best_packages_plugins_for_org_mode/
* Writing
- https://github.com/tmalsburg/guess-language.el
* Debugging
- toggle-debug-on-quit
- interaction-log-mode
- what-cursor-position
- debug-on-entry
* Profiling
- profiler-start
- profiler-stop
- profiler-report
- https://stackoverflow.com/questions/568150/tips-for-profiling-misbehaving-emacs-lisp
- (setq use-package-compute-statistics t)
** benchmark-init
- Benchmark your Emacs initialization
- https://github.com/dholm/benchmark-init-el
* Keymapping
- In general evil keybinding override minor mode keybindings.
- Evil does some funky stuff when defining minor mode bindings for a specific state (general-define-key :keymaps map :states 'normal ...)
  - As a result, state minor mode binding might not work without state change
  - https://github.com/emacs-evil/evil/issues/130
  - https://github.com/emacs-evil/evil/issues/301
  - So, prefer :definer 'minor-mode to set minor-mode bindings (uses 'evil-define-minor-mode-key')
** Sources
- https://github.com/syl20bnr/spacemacs/wiki/Keymaps-guide
- https://github.com/noctuid/general.el#override-keymaps-and-buffer-local-keybindings
- https://github.com/noctuid/evil-guide#what-overrides-evil
- https://github.com/noctuid/evil-guide#keymap-precedence
- https://oremacs.com/2014/12/31/keymap-arms-race/
- https://www.masteringemacs.org/article/mastering-key-bindings-emacs
* Elisp Cheat Sheet
- https://alhassy.github.io/ElispCheatSheet/CheatSheet.pdf
* tree-sitter missing tsc-dyn-get
- Copy tsc-dyn-get.el from straight\repos\elisp-tree-sitter\core to straight\build\tree-sitter
* Install tree-sitter grammars
- https://www.masteringemacs.org/article/how-to-get-started-tree-sitter#using-pre-compiled-language-grammars
- Download from https://github.com/emacs-tree-sitter/tree-sitter-langs/releases
- Extract to ~/.emacs.d/tree-sitter
- rename files to libtree-sitter-<LANGUAGE>.so
